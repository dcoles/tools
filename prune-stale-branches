#!/bin/bash
# Prune state merged branches from Git remote
set -e -u

REMOTE=origin
AGE='6 months ago'
STALE="$(date -d "${AGE}" +%s)"
DELETE=0

for arg in "$@"; do
    case "${arg}" in
        --delete)
            DELETE=1
            ;;
        -*)
            echo >&2 "Unknown flag ${arg}"
            exit 2
            ;;
    esac
done

echo >&2 "Pruning merged branches from '${REMOTE}' last touched more than ${AGE}"
git fetch --prune "${REMOTE}"
readarray -t BRANCHES < <(git branch --format '%(committerdate:unix) %(refname:lstrip=3)' --sort=committerdate --remote --merged "${REMOTE}/master")

STALE_BRANCHES=()
for branch in "${BRANCHES[@]}"; do
    T="$(cut -d ' ' -f 1 <<<"${branch}")"
    B="$(cut -d ' ' -f 2 <<<"${branch}")"

    # Ignore master and HEAD
    if [[ "${B}" =~ ^(master|HEAD)$ ]]; then
        echo >&2 "Skipping ${REMOTE}/${B}"
        continue
    fi

    # Ignore anything that looks like a version number
    if [[ "${B}" =~ [0-9]+[.][x0-9]+[.][x0-9]+ ]]; then
        echo >&2 "Skipping ${REMOTE}/${B}"
        continue
    fi

    if [[ "${T}" -gt "${STALE}" ]]; then
        # The remainder of the branches are newer
        break
    fi

    STALE_BRANCHES+=(refs/heads/"${B}")
done

if [[ "${#STALE_BRANCHES[@]}" -eq 0 ]]; then
    echo >&2 'No branches to delete'
    exit 0
fi

if [[ "${DELETE}" -ne 0 ]]; then
    git push --delete -- "${REMOTE}" "${STALE_BRANCHES[@]}"
else
    echo >&2 'NOTE: Dry run (not actually deleting branches)'
    git push --dry-run --delete -- "${REMOTE}" "${STALE_BRANCHES[@]}"
fi
